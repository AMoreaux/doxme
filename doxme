#!/usr/bin/env node

var concat = require('concat-stream'),
    striptags = require('striptags');

process.stdin.pipe(concat(function(json) {
    var data = JSON.parse(json);
    data.forEach(function(d) {
        var alias, returns;
        var name = '', mod;
        if (alias = getTag(d.tags, 'alias')) {
            name = alias.string;
        } else if (mod = getTag(d.tags, 'module')) {
            name = mod.string;
        } else {
            name = d.ctx && d.ctx.name;
        }
        if (name !== '') {
            var args = getTags(d.tags, 'param').map(function(p) {
                return p.name;
            }).join(', ');
            console.log('\n## %s(%s)\n', name, args);
            if (d.description) {
                console.log('%s\n', reformat(d.description.full));
            }

            getTags(d.tags, 'param').forEach(function(p) {
                console.log('* `%s` (`%s`): %s', p.name, p.types.join(','), striptags(p.description));
                // console.log(p);
            });

            getTags(d.tags, 'example').forEach(function(p) {
                console.log('\n```js\n%s\n```\n', p.string);
            });

            if (returns = getTag(d.tags, 'returns')) {
                console.log('\n**Returns** `%s`, %s\n', returns.types.join(','), reformat(returns.description));
            }
        }
    });
}));

function getTags(tags, type) {
    return tags.filter(function(t) { return t.type === type; });
}

function getTag(tags, type) {
    return tags.filter(function(t) { return t.type === type; })[0];
}

function reformat(str) {
    return striptags(str.replace('<br />', ' '));
}
